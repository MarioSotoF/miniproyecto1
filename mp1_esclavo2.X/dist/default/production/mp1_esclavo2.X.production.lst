

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Wed Feb 24 21:07:24 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	maintext,global,class=CODE,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	intentry,global,class=CODE,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2
    15                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    16                           	dabs	1,0x7E,2
    17  0000                     
    18                           ; Version 2.20
    19                           ; Generated 12/02/2020 GMT
    20                           ; 
    21                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    22                           ; All rights reserved.
    23                           ; 
    24                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    25                           ; 
    26                           ; Redistribution and use in source and binary forms, with or without modification, are
    27                           ; permitted provided that the following conditions are met:
    28                           ; 
    29                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    30                           ;        conditions and the following disclaimer.
    31                           ; 
    32                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    33                           ;        of conditions and the following disclaimer in the documentation and/or other
    34                           ;        materials provided with the distribution.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F887 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52  0000                     	;# 
    53  0001                     	;# 
    54  0002                     	;# 
    55  0003                     	;# 
    56  0004                     	;# 
    57  0005                     	;# 
    58  0006                     	;# 
    59  0007                     	;# 
    60  0008                     	;# 
    61  0009                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000D                     	;# 
    66  000E                     	;# 
    67  000E                     	;# 
    68  000F                     	;# 
    69  0010                     	;# 
    70  0011                     	;# 
    71  0012                     	;# 
    72  0013                     	;# 
    73  0014                     	;# 
    74  0015                     	;# 
    75  0015                     	;# 
    76  0016                     	;# 
    77  0017                     	;# 
    78  0018                     	;# 
    79  0019                     	;# 
    80  001A                     	;# 
    81  001B                     	;# 
    82  001B                     	;# 
    83  001C                     	;# 
    84  001D                     	;# 
    85  001E                     	;# 
    86  001F                     	;# 
    87  0081                     	;# 
    88  0085                     	;# 
    89  0086                     	;# 
    90  0087                     	;# 
    91  0088                     	;# 
    92  0089                     	;# 
    93  008C                     	;# 
    94  008D                     	;# 
    95  008E                     	;# 
    96  008F                     	;# 
    97  0090                     	;# 
    98  0091                     	;# 
    99  0092                     	;# 
   100  0093                     	;# 
   101  0093                     	;# 
   102  0093                     	;# 
   103  0094                     	;# 
   104  0095                     	;# 
   105  0096                     	;# 
   106  0097                     	;# 
   107  0098                     	;# 
   108  0099                     	;# 
   109  009A                     	;# 
   110  009B                     	;# 
   111  009C                     	;# 
   112  009D                     	;# 
   113  009E                     	;# 
   114  009F                     	;# 
   115  0105                     	;# 
   116  0107                     	;# 
   117  0108                     	;# 
   118  0109                     	;# 
   119  010C                     	;# 
   120  010C                     	;# 
   121  010D                     	;# 
   122  010E                     	;# 
   123  010F                     	;# 
   124  0185                     	;# 
   125  0187                     	;# 
   126  0188                     	;# 
   127  0189                     	;# 
   128  018C                     	;# 
   129  018D                     	;# 
   130  0000                     	;# 
   131  0001                     	;# 
   132  0002                     	;# 
   133  0003                     	;# 
   134  0004                     	;# 
   135  0005                     	;# 
   136  0006                     	;# 
   137  0007                     	;# 
   138  0008                     	;# 
   139  0009                     	;# 
   140  000A                     	;# 
   141  000B                     	;# 
   142  000C                     	;# 
   143  000D                     	;# 
   144  000E                     	;# 
   145  000E                     	;# 
   146  000F                     	;# 
   147  0010                     	;# 
   148  0011                     	;# 
   149  0012                     	;# 
   150  0013                     	;# 
   151  0014                     	;# 
   152  0015                     	;# 
   153  0015                     	;# 
   154  0016                     	;# 
   155  0017                     	;# 
   156  0018                     	;# 
   157  0019                     	;# 
   158  001A                     	;# 
   159  001B                     	;# 
   160  001B                     	;# 
   161  001C                     	;# 
   162  001D                     	;# 
   163  001E                     	;# 
   164  001F                     	;# 
   165  0081                     	;# 
   166  0085                     	;# 
   167  0086                     	;# 
   168  0087                     	;# 
   169  0088                     	;# 
   170  0089                     	;# 
   171  008C                     	;# 
   172  008D                     	;# 
   173  008E                     	;# 
   174  008F                     	;# 
   175  0090                     	;# 
   176  0091                     	;# 
   177  0092                     	;# 
   178  0093                     	;# 
   179  0093                     	;# 
   180  0093                     	;# 
   181  0094                     	;# 
   182  0095                     	;# 
   183  0096                     	;# 
   184  0097                     	;# 
   185  0098                     	;# 
   186  0099                     	;# 
   187  009A                     	;# 
   188  009B                     	;# 
   189  009C                     	;# 
   190  009D                     	;# 
   191  009E                     	;# 
   192  009F                     	;# 
   193  0105                     	;# 
   194  0107                     	;# 
   195  0108                     	;# 
   196  0109                     	;# 
   197  010C                     	;# 
   198  010C                     	;# 
   199  010D                     	;# 
   200  010E                     	;# 
   201  010F                     	;# 
   202  0185                     	;# 
   203  0187                     	;# 
   204  0188                     	;# 
   205  0189                     	;# 
   206  018C                     	;# 
   207  018D                     	;# 
   208  0000                     	;# 
   209  0001                     	;# 
   210  0002                     	;# 
   211  0003                     	;# 
   212  0004                     	;# 
   213  0005                     	;# 
   214  0006                     	;# 
   215  0007                     	;# 
   216  0008                     	;# 
   217  0009                     	;# 
   218  000A                     	;# 
   219  000B                     	;# 
   220  000C                     	;# 
   221  000D                     	;# 
   222  000E                     	;# 
   223  000E                     	;# 
   224  000F                     	;# 
   225  0010                     	;# 
   226  0011                     	;# 
   227  0012                     	;# 
   228  0013                     	;# 
   229  0014                     	;# 
   230  0015                     	;# 
   231  0015                     	;# 
   232  0016                     	;# 
   233  0017                     	;# 
   234  0018                     	;# 
   235  0019                     	;# 
   236  001A                     	;# 
   237  001B                     	;# 
   238  001B                     	;# 
   239  001C                     	;# 
   240  001D                     	;# 
   241  001E                     	;# 
   242  001F                     	;# 
   243  0081                     	;# 
   244  0085                     	;# 
   245  0086                     	;# 
   246  0087                     	;# 
   247  0088                     	;# 
   248  0089                     	;# 
   249  008C                     	;# 
   250  008D                     	;# 
   251  008E                     	;# 
   252  008F                     	;# 
   253  0090                     	;# 
   254  0091                     	;# 
   255  0092                     	;# 
   256  0093                     	;# 
   257  0093                     	;# 
   258  0093                     	;# 
   259  0094                     	;# 
   260  0095                     	;# 
   261  0096                     	;# 
   262  0097                     	;# 
   263  0098                     	;# 
   264  0099                     	;# 
   265  009A                     	;# 
   266  009B                     	;# 
   267  009C                     	;# 
   268  009D                     	;# 
   269  009E                     	;# 
   270  009F                     	;# 
   271  0105                     	;# 
   272  0107                     	;# 
   273  0108                     	;# 
   274  0109                     	;# 
   275  010C                     	;# 
   276  010C                     	;# 
   277  010D                     	;# 
   278  010E                     	;# 
   279  010F                     	;# 
   280  0185                     	;# 
   281  0187                     	;# 
   282  0188                     	;# 
   283  0189                     	;# 
   284  018C                     	;# 
   285  018D                     	;# 
   286  0013                     _SSPBUF	set	19
   287  0014                     _SSPCON	set	20
   288  0006                     _PORTBbits	set	6
   289  0008                     _PORTD	set	8
   290  0006                     _PORTB	set	6
   291  0005                     _PORTA	set	5
   292  000B                     _INTCONbits	set	11
   293  0063                     _SSPIF	set	99
   294  0094                     _SSPSTATbits	set	148
   295  0094                     _SSPSTAT	set	148
   296  0088                     _TRISD	set	136
   297  0087                     _TRISC	set	135
   298  0086                     _TRISB	set	134
   299  0085                     _TRISA	set	133
   300  0096                     _IOCBbits	set	150
   301  008F                     _OSCCONbits	set	143
   302  043B                     _TRISC3	set	1083
   303  043D                     _TRISC5	set	1085
   304  042D                     _TRISA5	set	1069
   305  0189                     _ANSELH	set	393
   306  0188                     _ANSEL	set	392
   307                           
   308                           	psect	cinit
   309  000F                     start_initialization:	
   310                           ; #config settings
   311                           
   312  000F                     __initialization:
   313                           
   314                           ; Clear objects allocated to COMMON
   315  000F  01F7               	clrf	__pbssCOMMON& (0+127)
   316  0010  01F8               	clrf	(__pbssCOMMON+1)& (0+127)
   317  0011  01F9               	clrf	(__pbssCOMMON+2)& (0+127)
   318  0012                     end_of_initialization:	
   319                           ;End of C runtime variable initialization code
   320                           
   321  0012                     __end_of__initialization:
   322  0012  0183               	clrf	3
   323  0013  120A  118A  2865   	ljmp	_main	;jump to C main() function
   324                           
   325                           	psect	bssCOMMON
   326  0077                     __pbssCOMMON:
   327  0077                     _Counter:
   328  0077                     	ds	1
   329  0078                     _Decremento:
   330  0078                     	ds	1
   331  0079                     _Incremento:
   332  0079                     	ds	1
   333                           
   334                           	psect	cstackCOMMON
   335  0070                     __pcstackCOMMON:
   336  0070                     ?_spiRead:
   337  0070                     ??_spiRead:	
   338                           ; 1 bytes @ 0x0
   339                           
   340  0070                     ?_spiWrite:	
   341                           ; 1 bytes @ 0x0
   342                           
   343  0070                     ??_spiWrite:	
   344                           ; 1 bytes @ 0x0
   345                           
   346  0070                     ?_main:	
   347                           ; 1 bytes @ 0x0
   348                           
   349  0070                     ?_ISR:	
   350                           ; 1 bytes @ 0x0
   351                           
   352  0070                     ?_spiReceiveWait:	
   353                           ; 1 bytes @ 0x0
   354                           
   355  0070                     ??_spiReceiveWait:	
   356                           ; 1 bytes @ 0x0
   357                           
   358  0070                     spiWrite@dat:	
   359                           ; 1 bytes @ 0x0
   360                           
   361                           
   362                           ; 1 bytes @ 0x0
   363  0070                     	ds	1
   364  0071                     ??_ISR:
   365                           
   366                           ; 1 bytes @ 0x1
   367  0071                     	ds	3
   368  0074                     ?_spiInit:
   369  0074                     spiInit@sDataSample:	
   370                           ; 1 bytes @ 0x4
   371                           
   372                           
   373                           ; 1 bytes @ 0x4
   374  0074                     	ds	1
   375  0075                     spiInit@sClockIdle:
   376                           
   377                           ; 1 bytes @ 0x5
   378  0075                     	ds	1
   379  0076                     spiInit@sTransmitEdge:
   380                           
   381                           ; 1 bytes @ 0x6
   382  0076                     	ds	1
   383  0077                     ??_spiInit:
   384  0077                     ??_main:	
   385                           ; 1 bytes @ 0x7
   386                           
   387                           
   388                           	psect	cstackBANK0
   389  0020                     __pcstackBANK0:	
   390                           ; 1 bytes @ 0x7
   391                           
   392  0020                     spiInit@sType:
   393                           
   394                           ; 1 bytes @ 0x0
   395  0020                     	ds	1
   396                           
   397                           	psect	maintext
   398  0065                     __pmaintext:	
   399 ;;
   400 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   401 ;;
   402 ;; *************** function _main *****************
   403 ;; Defined at:
   404 ;;		line 43 in file "main.c"
   405 ;; Parameters:    Size  Location     Type
   406 ;;		None
   407 ;; Auto vars:     Size  Location     Type
   408 ;;		None
   409 ;; Return value:  Size  Location     Type
   410 ;;                  1    wreg      void 
   411 ;; Registers used:
   412 ;;		wreg, status,2, status,0, pclath, cstack
   413 ;; Tracked objects:
   414 ;;		On entry : B00/0
   415 ;;		On exit  : 0/0
   416 ;;		Unchanged: 0/0
   417 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   418 ;;      Params:         0       0       0       0       0
   419 ;;      Locals:         0       0       0       0       0
   420 ;;      Temps:          0       0       0       0       0
   421 ;;      Totals:         0       0       0       0       0
   422 ;;Total ram usage:        0 bytes
   423 ;; Hardware stack levels required when called:    4
   424 ;; This function calls:
   425 ;;		_spiInit
   426 ;; This function is called by:
   427 ;;		Startup code after reset
   428 ;; This function uses a non-reentrant model
   429 ;;
   430                           
   431                           
   432                           ;psect for function _main
   433  0065                     _main:
   434  0065                     l857:	
   435                           ;incstack = 0
   436                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   437                           
   438                           
   439                           ;main.c: 44:     OSCCONbits.IRCF = 0b111;
   440  0065  3070               	movlw	112
   441  0066  1683               	bsf	3,5	;RP0=1, select bank1
   442  0067  1303               	bcf	3,6	;RP1=0, select bank1
   443  0068  048F               	iorwf	15,f	;volatile
   444  0069                     l859:
   445                           
   446                           ;main.c: 45:     OSCCONbits.OSTS = 0;
   447  0069  118F               	bcf	15,3	;volatile
   448  006A                     l861:
   449                           
   450                           ;main.c: 46:     OSCCONbits.HTS = 0;
   451  006A  110F               	bcf	15,2	;volatile
   452  006B                     l863:
   453                           
   454                           ;main.c: 47:     OSCCONbits.LTS = 0;
   455  006B  108F               	bcf	15,1	;volatile
   456  006C                     l865:
   457                           
   458                           ;main.c: 48:     OSCCONbits.SCS = 1;
   459  006C  140F               	bsf	15,0	;volatile
   460  006D                     l867:
   461                           
   462                           ;main.c: 49:     INTCONbits.GIE = 1;
   463  006D  178B               	bsf	11,7	;volatile
   464  006E                     l869:
   465                           
   466                           ;main.c: 50:     INTCONbits.PEIE = 1;
   467  006E  170B               	bsf	11,6	;volatile
   468  006F                     l871:
   469                           
   470                           ;main.c: 51:     INTCONbits.RBIE = 1;
   471  006F  158B               	bsf	11,3	;volatile
   472  0070                     l873:
   473                           
   474                           ;main.c: 52:     INTCONbits.RBIF = 0;
   475  0070  100B               	bcf	11,0	;volatile
   476  0071                     l875:
   477                           
   478                           ;main.c: 53:     IOCBbits.IOCB0 = 1;
   479  0071  1416               	bsf	22,0	;volatile
   480  0072                     l877:
   481                           
   482                           ;main.c: 54:     IOCBbits.IOCB1 = 1;
   483  0072  1496               	bsf	22,1	;volatile
   484  0073                     l879:
   485                           
   486                           ;main.c: 55:     ANSEL = 0;
   487  0073  1683               	bsf	3,5	;RP0=1, select bank3
   488  0074  1703               	bsf	3,6	;RP1=1, select bank3
   489  0075  0188               	clrf	8	;volatile
   490  0076                     l881:
   491                           
   492                           ;main.c: 56:     ANSELH = 0;
   493  0076  0189               	clrf	9	;volatile
   494  0077                     l883:
   495                           
   496                           ;main.c: 57:     TRISA = 0b00000000;
   497  0077  1683               	bsf	3,5	;RP0=1, select bank1
   498  0078  1303               	bcf	3,6	;RP1=0, select bank1
   499  0079  0185               	clrf	5	;volatile
   500  007A                     l885:
   501                           
   502                           ;main.c: 58:     PORTA = 0;
   503  007A  1283               	bcf	3,5	;RP0=0, select bank0
   504  007B  1303               	bcf	3,6	;RP1=0, select bank0
   505  007C  0185               	clrf	5	;volatile
   506  007D                     l887:
   507                           
   508                           ;main.c: 59:     TRISB = 0b00000011;
   509  007D  3003               	movlw	3
   510  007E  1683               	bsf	3,5	;RP0=1, select bank1
   511  007F  1303               	bcf	3,6	;RP1=0, select bank1
   512  0080  0086               	movwf	6	;volatile
   513  0081                     l889:
   514                           
   515                           ;main.c: 60:     TRISC = 0;
   516  0081  0187               	clrf	7	;volatile
   517  0082                     l891:
   518                           
   519                           ;main.c: 61:     PORTB = 0;
   520  0082  1283               	bcf	3,5	;RP0=0, select bank0
   521  0083  1303               	bcf	3,6	;RP1=0, select bank0
   522  0084  0186               	clrf	6	;volatile
   523  0085                     l893:
   524                           
   525                           ;main.c: 62:     TRISD = 0;
   526  0085  1683               	bsf	3,5	;RP0=1, select bank1
   527  0086  1303               	bcf	3,6	;RP1=0, select bank1
   528  0087  0188               	clrf	8	;volatile
   529  0088                     l895:
   530                           
   531                           ;main.c: 63:     PORTD = 0;
   532  0088  1283               	bcf	3,5	;RP0=0, select bank0
   533  0089  1303               	bcf	3,6	;RP1=0, select bank0
   534  008A  0188               	clrf	8	;volatile
   535  008B                     l897:
   536                           
   537                           ;main.c: 64:     TRISC = 0b00010000;
   538  008B  3010               	movlw	16
   539  008C  1683               	bsf	3,5	;RP0=1, select bank1
   540  008D  1303               	bcf	3,6	;RP1=0, select bank1
   541  008E  0087               	movwf	7	;volatile
   542  008F                     l899:
   543                           
   544                           ;main.c: 65:     TRISA5 = 1;
   545  008F  1685               	bsf	5,5	;volatile
   546  0090                     l901:
   547                           
   548                           ;main.c: 66:     spiInit(SPI_SLAVE_SS_EN, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_LOW, SP
      +                          I_IDLE_2_ACTIVE);
   549  0090  01F4               	clrf	spiInit@sDataSample
   550  0091  01F5               	clrf	spiInit@sClockIdle
   551  0092  01F6               	clrf	spiInit@sTransmitEdge
   552  0093  3024               	movlw	36
   553  0094  120A  118A  20A1  120A  118A  	fcall	_spiInit
   554  0099                     l903:
   555                           
   556                           ;main.c: 69:         PORTD = Counter;
   557  0099  0877               	movf	_Counter,w
   558  009A  1283               	bcf	3,5	;RP0=0, select bank0
   559  009B  1303               	bcf	3,6	;RP1=0, select bank0
   560  009C  0088               	movwf	8	;volatile
   561  009D  2899               	goto	l903
   562  009E  120A  118A  280C   	ljmp	start
   563  00A1                     __end_of_main:
   564                           
   565                           	psect	text1
   566  00A1                     __ptext1:	
   567 ;; *************** function _spiInit *****************
   568 ;; Defined at:
   569 ;;		line 12 in file "SPI.c"
   570 ;; Parameters:    Size  Location     Type
   571 ;;  sType           1    wreg     enum E1264
   572 ;;  sDataSample     1    4[COMMON] enum E1272
   573 ;;  sClockIdle      1    5[COMMON] enum E1276
   574 ;;  sTransmitEdg    1    6[COMMON] enum E1280
   575 ;; Auto vars:     Size  Location     Type
   576 ;;  sType           1    0[BANK0 ] enum E1264
   577 ;; Return value:  Size  Location     Type
   578 ;;                  1    wreg      void 
   579 ;; Registers used:
   580 ;;		wreg, status,2, status,0
   581 ;; Tracked objects:
   582 ;;		On entry : 0/0
   583 ;;		On exit  : 0/0
   584 ;;		Unchanged: 0/0
   585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   586 ;;      Params:         3       0       0       0       0
   587 ;;      Locals:         0       1       0       0       0
   588 ;;      Temps:          0       0       0       0       0
   589 ;;      Totals:         3       1       0       0       0
   590 ;;Total ram usage:        4 bytes
   591 ;; Hardware stack levels used:    1
   592 ;; Hardware stack levels required when called:    3
   593 ;; This function calls:
   594 ;;		Nothing
   595 ;; This function is called by:
   596 ;;		_main
   597 ;; This function uses a non-reentrant model
   598 ;;
   599                           
   600                           
   601                           ;psect for function _spiInit
   602  00A1                     _spiInit:
   603                           
   604                           ;incstack = 0
   605                           ; Regs used in _spiInit: [wreg+status,2+status,0]
   606                           ;spiInit@sType stored from wreg
   607  00A1  1283               	bcf	3,5	;RP0=0, select bank0
   608  00A2  1303               	bcf	3,6	;RP1=0, select bank0
   609  00A3  00A0               	movwf	spiInit@sType
   610  00A4                     l847:
   611                           
   612                           ;SPI.c: 12: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 13: {;SPI.c: 14:     TRISC5 = 0;
   613  00A4  1683               	bsf	3,5	;RP0=1, select bank1
   614  00A5  1303               	bcf	3,6	;RP1=0, select bank1
   615  00A6  1287               	bcf	7,5	;volatile
   616                           
   617                           ;SPI.c: 15:     if(sType & 0b00000100)
   618  00A7  1283               	bcf	3,5	;RP0=0, select bank0
   619  00A8  1303               	bcf	3,6	;RP1=0, select bank0
   620  00A9  1D20               	btfss	spiInit@sType,2
   621  00AA  28AC               	goto	u121
   622  00AB  28AD               	goto	u120
   623  00AC                     u121:
   624  00AC  28B3               	goto	l853
   625  00AD                     u120:
   626  00AD                     l849:
   627                           
   628                           ;SPI.c: 16:     {;SPI.c: 17:         SSPSTAT = sTransmitEdge;
   629  00AD  0876               	movf	spiInit@sTransmitEdge,w
   630  00AE  1683               	bsf	3,5	;RP0=1, select bank1
   631  00AF  1303               	bcf	3,6	;RP1=0, select bank1
   632  00B0  0094               	movwf	20	;volatile
   633  00B1                     l851:
   634                           
   635                           ;SPI.c: 18:         TRISC3 = 1;
   636  00B1  1587               	bsf	7,3	;volatile
   637                           
   638                           ;SPI.c: 19:     }
   639  00B2  28B9               	goto	l77
   640  00B3                     l853:
   641                           
   642                           ;SPI.c: 21:     {;SPI.c: 22:         SSPSTAT = sDataSample | sTransmitEdge;
   643  00B3  0874               	movf	spiInit@sDataSample,w
   644  00B4  0476               	iorwf	spiInit@sTransmitEdge,w
   645  00B5  1683               	bsf	3,5	;RP0=1, select bank1
   646  00B6  1303               	bcf	3,6	;RP1=0, select bank1
   647  00B7  0094               	movwf	20	;volatile
   648  00B8                     l855:
   649                           
   650                           ;SPI.c: 23:         TRISC3 = 0;
   651  00B8  1187               	bcf	7,3	;volatile
   652  00B9                     l77:	
   653                           ;SPI.c: 24:     }
   654                           
   655                           
   656                           ;SPI.c: 26:     SSPCON = sType | sClockIdle;
   657  00B9  1283               	bcf	3,5	;RP0=0, select bank0
   658  00BA  1303               	bcf	3,6	;RP1=0, select bank0
   659  00BB  0820               	movf	spiInit@sType,w
   660  00BC  0475               	iorwf	spiInit@sClockIdle,w
   661  00BD  0094               	movwf	20	;volatile
   662  00BE                     l78:
   663  00BE  0008               	return
   664  00BF                     __end_of_spiInit:
   665                           
   666                           	psect	text2
   667  0016                     __ptext2:	
   668 ;; *************** function _ISR *****************
   669 ;; Defined at:
   670 ;;		line 75 in file "main.c"
   671 ;; Parameters:    Size  Location     Type
   672 ;;		None
   673 ;; Auto vars:     Size  Location     Type
   674 ;;		None
   675 ;; Return value:  Size  Location     Type
   676 ;;                  1    wreg      void 
   677 ;; Registers used:
   678 ;;		wreg, status,2, status,0, pclath, cstack
   679 ;; Tracked objects:
   680 ;;		On entry : 0/0
   681 ;;		On exit  : 0/0
   682 ;;		Unchanged: 0/0
   683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   684 ;;      Params:         0       0       0       0       0
   685 ;;      Locals:         0       0       0       0       0
   686 ;;      Temps:          3       0       0       0       0
   687 ;;      Totals:         3       0       0       0       0
   688 ;;Total ram usage:        3 bytes
   689 ;; Hardware stack levels used:    1
   690 ;; Hardware stack levels required when called:    2
   691 ;; This function calls:
   692 ;;		_spiRead
   693 ;;		_spiWrite
   694 ;; This function is called by:
   695 ;;		Interrupt level 1
   696 ;; This function uses a non-reentrant model
   697 ;;
   698                           
   699                           
   700                           ;psect for function _ISR
   701  0016                     _ISR:
   702  0016                     i1l755:
   703                           
   704                           ;main.c: 76:     if (INTCONbits.RBIF == 1) {
   705  0016  1C0B               	btfss	11,0	;volatile
   706  0017  2819               	goto	u3_21
   707  0018  281A               	goto	u3_20
   708  0019                     u3_21:
   709  0019  284A               	goto	i1l55
   710  001A                     u3_20:
   711  001A                     i1l757:
   712                           
   713                           ;main.c: 77:         if (PORTBbits.RB0 == 1) {
   714  001A  1283               	bcf	3,5	;RP0=0, select bank0
   715  001B  1303               	bcf	3,6	;RP1=0, select bank0
   716  001C  1C06               	btfss	6,0	;volatile
   717  001D  281F               	goto	u4_21
   718  001E  2820               	goto	u4_20
   719  001F                     u4_21:
   720  001F  2822               	goto	i1l56
   721  0020                     u4_20:
   722  0020                     i1l759:
   723                           
   724                           ;main.c: 78:             Incremento = 1;
   725  0020  01F9               	clrf	_Incremento
   726  0021  0AF9               	incf	_Incremento,f
   727  0022                     i1l56:	
   728                           ;main.c: 79:         }
   729                           
   730                           
   731                           ;main.c: 80:         if (PORTBbits.RB0 == 0 && Incremento == 1) {
   732  0022  1806               	btfsc	6,0	;volatile
   733  0023  2825               	goto	u5_21
   734  0024  2826               	goto	u5_20
   735  0025                     u5_21:
   736  0025  2832               	goto	i1l57
   737  0026                     u5_20:
   738  0026                     i1l761:
   739  0026  0379               	decf	_Incremento,w
   740  0027  1D03               	btfss	3,2
   741  0028  282A               	goto	u6_21
   742  0029  282B               	goto	u6_20
   743  002A                     u6_21:
   744  002A  2832               	goto	i1l57
   745  002B                     u6_20:
   746  002B                     i1l763:
   747                           
   748                           ;main.c: 81:             Incremento = 0;
   749  002B  01F9               	clrf	_Incremento
   750  002C                     i1l765:
   751                           
   752                           ;main.c: 82:             Counter = Counter + 1;
   753  002C  0877               	movf	_Counter,w
   754  002D  3E01               	addlw	1
   755  002E  00F1               	movwf	??_ISR
   756  002F  0871               	movf	??_ISR,w
   757  0030  00F7               	movwf	_Counter
   758  0031  285E               	goto	i1l58
   759  0032                     i1l57:	
   760                           ;main.c: 84:         }
   761                           
   762                           
   763                           ;main.c: 85:         if (PORTBbits.RB1 == 1) {
   764  0032  1C86               	btfss	6,1	;volatile
   765  0033  2835               	goto	u7_21
   766  0034  2836               	goto	u7_20
   767  0035                     u7_21:
   768  0035  2838               	goto	i1l59
   769  0036                     u7_20:
   770  0036                     i1l769:
   771                           
   772                           ;main.c: 86:             Decremento = 1;
   773  0036  01F8               	clrf	_Decremento
   774  0037  0AF8               	incf	_Decremento,f
   775  0038                     i1l59:	
   776                           ;main.c: 87:         }
   777                           
   778                           
   779                           ;main.c: 88:         if (PORTBbits.RB1 == 0 && Decremento == 1) {
   780  0038  1886               	btfsc	6,1	;volatile
   781  0039  283B               	goto	u8_21
   782  003A  283C               	goto	u8_20
   783  003B                     u8_21:
   784  003B  2848               	goto	i1l60
   785  003C                     u8_20:
   786  003C                     i1l771:
   787  003C  0378               	decf	_Decremento,w
   788  003D  1D03               	btfss	3,2
   789  003E  2840               	goto	u9_21
   790  003F  2841               	goto	u9_20
   791  0040                     u9_21:
   792  0040  2848               	goto	i1l60
   793  0041                     u9_20:
   794  0041                     i1l773:
   795                           
   796                           ;main.c: 89:             Decremento = 0;
   797  0041  01F8               	clrf	_Decremento
   798  0042                     i1l775:
   799                           
   800                           ;main.c: 90:             Counter = Counter - 1;
   801  0042  0877               	movf	_Counter,w
   802  0043  3EFF               	addlw	255
   803  0044  00F1               	movwf	??_ISR
   804  0045  0871               	movf	??_ISR,w
   805  0046  00F7               	movwf	_Counter
   806  0047  285E               	goto	i1l58
   807  0048                     i1l60:	
   808                           ;main.c: 92:         }
   809                           
   810                           
   811                           ;main.c: 94:         INTCONbits.RBIF = 0;
   812  0048  100B               	bcf	11,0	;volatile
   813                           
   814                           ;main.c: 95:         return;
   815  0049  285E               	goto	i1l58
   816  004A                     i1l55:	
   817                           ;main.c: 96:     }
   818                           
   819                           
   820                           ;main.c: 99:     if(SSPIF == 1){
   821  004A  1283               	bcf	3,5	;RP0=0, select bank0
   822  004B  1303               	bcf	3,6	;RP1=0, select bank0
   823  004C  1D8C               	btfss	12,3	;volatile
   824  004D  284F               	goto	u10_21
   825  004E  2850               	goto	u10_20
   826  004F                     u10_21:
   827  004F  285E               	goto	i1l58
   828  0050                     u10_20:
   829  0050                     i1l779:
   830                           
   831                           ;main.c: 100:         spiRead();
   832  0050  120A  118A  20BF  120A  118A  	fcall	_spiRead
   833                           
   834                           ;main.c: 101:         spiWrite(Counter);
   835  0055  0877               	movf	_Counter,w
   836  0056  120A  118A  20CF  120A  118A  	fcall	_spiWrite
   837  005B                     i1l781:
   838                           
   839                           ;main.c: 102:         SSPIF = 0;
   840  005B  1283               	bcf	3,5	;RP0=0, select bank0
   841  005C  1303               	bcf	3,6	;RP1=0, select bank0
   842  005D  118C               	bcf	12,3	;volatile
   843  005E                     i1l58:
   844  005E  0873               	movf	??_ISR+2,w
   845  005F  008A               	movwf	10
   846  0060  0E72               	swapf	??_ISR+1,w
   847  0061  0083               	movwf	3
   848  0062  0EFE               	swapf	btemp,f
   849  0063  0E7E               	swapf	btemp,w
   850  0064  0009               	retfie
   851  0065                     __end_of_ISR:
   852                           
   853                           	psect	intentry
   854  0004                     __pintentry:	
   855                           ;incstack = 0
   856                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
   857                           
   858  0004                     interrupt_function:
   859  007E                     saved_w	set	btemp
   860  0004  00FE               	movwf	btemp
   861  0005  0E03               	swapf	3,w
   862  0006  00F2               	movwf	??_ISR+1
   863  0007  080A               	movf	10,w
   864  0008  00F3               	movwf	??_ISR+2
   865  0009  120A  118A  2816   	ljmp	_ISR
   866                           
   867                           	psect	text3
   868  00CF                     __ptext3:	
   869 ;; *************** function _spiWrite *****************
   870 ;; Defined at:
   871 ;;		line 34 in file "SPI.c"
   872 ;; Parameters:    Size  Location     Type
   873 ;;  dat             1    wreg     unsigned char 
   874 ;; Auto vars:     Size  Location     Type
   875 ;;  dat             1    0[COMMON] unsigned char 
   876 ;; Return value:  Size  Location     Type
   877 ;;                  1    wreg      void 
   878 ;; Registers used:
   879 ;;		wreg
   880 ;; Tracked objects:
   881 ;;		On entry : 0/0
   882 ;;		On exit  : 0/0
   883 ;;		Unchanged: 0/0
   884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   885 ;;      Params:         0       0       0       0       0
   886 ;;      Locals:         1       0       0       0       0
   887 ;;      Temps:          0       0       0       0       0
   888 ;;      Totals:         1       0       0       0       0
   889 ;;Total ram usage:        1 bytes
   890 ;; Hardware stack levels used:    1
   891 ;; This function calls:
   892 ;;		Nothing
   893 ;; This function is called by:
   894 ;;		_ISR
   895 ;; This function uses a non-reentrant model
   896 ;;
   897                           
   898                           
   899                           ;psect for function _spiWrite
   900  00CF                     _spiWrite:
   901                           
   902                           ;incstack = 0
   903                           ; Regs used in _spiWrite: [wreg]
   904                           ;spiWrite@dat stored from wreg
   905  00CF  00F0               	movwf	spiWrite@dat
   906  00D0                     i1l705:
   907                           
   908                           ;SPI.c: 34: void spiWrite(char dat);SPI.c: 35: {;SPI.c: 36:     SSPBUF = dat;
   909  00D0  0870               	movf	spiWrite@dat,w
   910  00D1  1283               	bcf	3,5	;RP0=0, select bank0
   911  00D2  1303               	bcf	3,6	;RP1=0, select bank0
   912  00D3  0093               	movwf	19	;volatile
   913  00D4                     i1l87:
   914  00D4  0008               	return
   915  00D5                     __end_of_spiWrite:
   916                           
   917                           	psect	text4
   918  00BF                     __ptext4:	
   919 ;; *************** function _spiRead *****************
   920 ;; Defined at:
   921 ;;		line 47 in file "SPI.c"
   922 ;; Parameters:    Size  Location     Type
   923 ;;		None
   924 ;; Auto vars:     Size  Location     Type
   925 ;;		None
   926 ;; Return value:  Size  Location     Type
   927 ;;                  1    wreg      unsigned char 
   928 ;; Registers used:
   929 ;;		wreg, status,2, status,0, pclath, cstack
   930 ;; Tracked objects:
   931 ;;		On entry : 0/0
   932 ;;		On exit  : 0/0
   933 ;;		Unchanged: 0/0
   934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   935 ;;      Params:         0       0       0       0       0
   936 ;;      Locals:         0       0       0       0       0
   937 ;;      Temps:          0       0       0       0       0
   938 ;;      Totals:         0       0       0       0       0
   939 ;;Total ram usage:        0 bytes
   940 ;; Hardware stack levels used:    1
   941 ;; Hardware stack levels required when called:    1
   942 ;; This function calls:
   943 ;;		_spiReceiveWait
   944 ;; This function is called by:
   945 ;;		_ISR
   946 ;; This function uses a non-reentrant model
   947 ;;
   948                           
   949                           
   950                           ;psect for function _spiRead
   951  00BF                     _spiRead:
   952  00BF                     i1l699:	
   953                           ;incstack = 0
   954                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
   955                           
   956                           
   957                           ;SPI.c: 49:     spiReceiveWait();
   958  00BF  120A  118A  20C8  120A  118A  	fcall	_spiReceiveWait
   959  00C4                     i1l701:
   960                           
   961                           ;SPI.c: 50:     return(SSPBUF);;	Return value of _spiRead is never used
   962  00C4  1283               	bcf	3,5	;RP0=0, select bank0
   963  00C5  1303               	bcf	3,6	;RP1=0, select bank0
   964  00C6  0813               	movf	19,w	;volatile
   965  00C7                     i1l95:
   966  00C7  0008               	return
   967  00C8                     __end_of_spiRead:
   968                           
   969                           	psect	text5
   970  00C8                     __ptext5:	
   971 ;; *************** function _spiReceiveWait *****************
   972 ;; Defined at:
   973 ;;		line 29 in file "SPI.c"
   974 ;; Parameters:    Size  Location     Type
   975 ;;		None
   976 ;; Auto vars:     Size  Location     Type
   977 ;;		None
   978 ;; Return value:  Size  Location     Type
   979 ;;                  1    wreg      void 
   980 ;; Registers used:
   981 ;;		None
   982 ;; Tracked objects:
   983 ;;		On entry : 0/0
   984 ;;		On exit  : 0/0
   985 ;;		Unchanged: 0/0
   986 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   987 ;;      Params:         0       0       0       0       0
   988 ;;      Locals:         0       0       0       0       0
   989 ;;      Temps:          0       0       0       0       0
   990 ;;      Totals:         0       0       0       0       0
   991 ;;Total ram usage:        0 bytes
   992 ;; Hardware stack levels used:    1
   993 ;; This function calls:
   994 ;;		Nothing
   995 ;; This function is called by:
   996 ;;		_spiRead
   997 ;; This function uses a non-reentrant model
   998 ;;
   999                           
  1000                           
  1001                           ;psect for function _spiReceiveWait
  1002  00C8                     _spiReceiveWait:
  1003  00C8                     i1l687:	
  1004                           ;incstack = 0
  1005                           ; Regs used in _spiReceiveWait: []
  1006                           
  1007  00C8                     i1l81:	
  1008                           ;SPI.c: 31:     while ( !SSPSTATbits.BF );
  1009                           
  1010  00C8  1683               	bsf	3,5	;RP0=1, select bank1
  1011  00C9  1303               	bcf	3,6	;RP1=0, select bank1
  1012  00CA  1C14               	btfss	20,0	;volatile
  1013  00CB  28CD               	goto	u1_21
  1014  00CC  28CE               	goto	u1_20
  1015  00CD                     u1_21:
  1016  00CD  28C8               	goto	i1l81
  1017  00CE                     u1_20:
  1018  00CE                     i1l84:
  1019  00CE  0008               	return
  1020  00CF                     __end_of_spiReceiveWait:
  1021  007E                     btemp	set	126	;btemp
  1022  007E                     wtemp0	set	126
  1023                           
  1024                           	psect	config
  1025                           
  1026                           ;Config register CONFIG1 @ 0x2007
  1027                           ;	Oscillator Selection bits
  1028                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  1029                           ;	Watchdog Timer Enable bit
  1030                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1031                           ;	Power-up Timer Enable bit
  1032                           ;	PWRTE = OFF, PWRT disabled
  1033                           ;	RE3/MCLR pin function select bit
  1034                           ;	MCLRE = ON, RE3/MCLR pin function is MCLR
  1035                           ;	Code Protection bit
  1036                           ;	CP = OFF, Program memory code protection is disabled
  1037                           ;	Data Code Protection bit
  1038                           ;	CPD = OFF, Data memory code protection is disabled
  1039                           ;	Brown Out Reset Selection bits
  1040                           ;	BOREN = OFF, BOR disabled
  1041                           ;	Internal External Switchover bit
  1042                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1043                           ;	Fail-Safe Clock Monitor Enabled bit
  1044                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1045                           ;	Low Voltage Programming Enable bit
  1046                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1047                           ;	In-Circuit Debugger Mode bit
  1048                           ;	DEBUG = 0x1, unprogrammed default
  1049  2007                     	org	8199
  1050  2007  20F4               	dw	8436
  1051                           
  1052                           ;Config register CONFIG2 @ 0x2008
  1053                           ;	Brown-out Reset Selection bit
  1054                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1055                           ;	Flash Program Memory Self Write Enable bits
  1056                           ;	WRT = OFF, Write protection off
  1057  2008                     	org	8200
  1058  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      7      10
    BANK0            80      1       1
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_spiInit

Critical Paths under _ISR in COMMON

    _ISR->_spiWrite

Critical Paths under _main in BANK0

    _main->_spiInit

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     456
                            _spiInit
 ---------------------------------------------------------------------------------
 (1) _spiInit                                              4     1      3     456
                                              4 COMMON     3     0      3
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  3     3      0      15
                                              1 COMMON     3     3      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (3) _spiWrite                                             1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (4) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _spiInit

 _ISR (ROOT)
   _spiRead
     _spiReceiveWait
   _spiWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      7       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       B       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      1       1       5        1.2%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       B      12        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Wed Feb 24 21:07:24 2021

            _SSPSTATbits 0094                       l77 00B9                       l78 00BE  
                    l901 0090                      l903 0099                      l851 00B1  
                    l853 00B3                      l861 006A                      l855 00B8  
                    l847 00A4                      l871 006F                      l863 006B  
                    l849 00AD                      l881 0076                      l873 0070  
                    l865 006C                      l857 0065                      l891 0082  
                    l883 0077                      l875 0071                      l867 006D  
                    l859 0069                      l893 0085                      l885 007A  
                    l877 0072                      l869 006E                      l895 0088  
                    l887 007D                      l879 0073                      l897 008B  
                    l889 0081                      l899 008F                      u120 00AD  
                    u121 00AC                      _ISR 0016                     ?_ISR 0070  
                   i1l60 0048                     i1l55 004A                     i1l56 0022  
                   i1l81 00C8                     i1l57 0032                     i1l58 005E  
                   i1l59 0038                     i1l84 00CE                     i1l95 00C7  
                   i1l87 00D4                     u1_20 00CE                     u1_21 00CD  
                   u3_20 001A                     u3_21 0019                     u4_20 0020  
                   u4_21 001F                     u5_20 0026                     u5_21 0025  
                   u6_20 002B                     u6_21 002A                     u7_20 0036  
                   u7_21 0035                     u8_20 003C                     u8_21 003B  
                   u9_20 0041                     u9_21 0040               _Decremento 0078  
                   _main 0065                     btemp 007E                     start 000C  
                  ??_ISR 0071                    ?_main 0070                    _ANSEL 0188  
                  i1l701 00C4                    i1l705 00D0                    i1l761 0026  
                  i1l771 003C                    i1l763 002B                    i1l755 0016  
                  i1l781 005B                    i1l773 0041                    i1l765 002C  
                  i1l757 001A                    i1l687 00C8                    i1l775 0042  
                  i1l759 0020                    i1l769 0036                    i1l699 00BF  
                  i1l779 0050                    u10_20 0050                    u10_21 004F  
                  _PORTA 0005                    _PORTB 0006                    _PORTD 0008  
                  _TRISA 0085                    _TRISB 0086                    _TRISC 0087  
                  _TRISD 0088                    _SSPIF 0063                    pclath 000A  
        __end_of_spiInit 00BF          __end_of_spiRead 00C8                    status 0003  
                  wtemp0 007E               _Incremento 0079          __initialization 000F  
           __end_of_main 00A1                   ??_main 0077                   _ANSELH 0189  
                 _TRISA5 042D                   _TRISC3 043B                   _TRISC5 043D  
                 _SSPCON 0014                   _SSPBUF 0013                   saved_w 007E  
       __end_of_spiWrite 00D5                ??_spiInit 0077                ??_spiRead 0070  
__end_of__initialization 0012           __pcstackCOMMON 0070               __pmaintext 0065  
             __pintentry 0004  __size_of_spiReceiveWait 0007                  _SSPSTAT 0094  
                _Counter 0077                ?_spiWrite 0070                  __ptext1 00A1  
                __ptext2 0016                  __ptext3 00CF                  __ptext4 00BF  
                __ptext5 00C8             __size_of_ISR 004F                  _spiInit 00A1  
                _spiRead 00BF     end_of_initialization 0012               ??_spiWrite 0070  
              _PORTBbits 0006              spiWrite@dat 0070           _spiReceiveWait 00C8  
    start_initialization 000F              __end_of_ISR 0065   __end_of_spiReceiveWait 00CF  
            __pbssCOMMON 0077                ___latbits 0002            __pcstackBANK0 0020  
        ?_spiReceiveWait 0070        __size_of_spiWrite 0006                 ?_spiInit 0074  
               ?_spiRead 0070     spiInit@sTransmitEdge 0076        interrupt_function 0004  
               _IOCBbits 0096       spiInit@sDataSample 0074         __size_of_spiInit 001E  
       __size_of_spiRead 0009            __size_of_main 003C                 _spiWrite 00CF  
           spiInit@sType 0020        spiInit@sClockIdle 0075               _INTCONbits 000B  
               intlevel1 0000         ??_spiReceiveWait 0070               _OSCCONbits 008F  
